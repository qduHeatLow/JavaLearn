{"remainingRequest":"C:\\cangqiongwaimai\\苍穹外卖前端课程\\代码\\day02\\project-sky-admin-vue-ts\\node_modules\\babel-loader\\lib\\index.js!C:\\cangqiongwaimai\\苍穹外卖前端课程\\代码\\day02\\project-sky-admin-vue-ts\\node_modules\\ts-loader\\index.js??ref--14-2!C:\\cangqiongwaimai\\苍穹外卖前端课程\\代码\\day02\\project-sky-admin-vue-ts\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\cangqiongwaimai\\苍穹外卖前端课程\\代码\\day02\\project-sky-admin-vue-ts\\src\\utils\\request.ts","dependencies":[{"path":"C:\\cangqiongwaimai\\苍穹外卖前端课程\\代码\\day02\\project-sky-admin-vue-ts\\src\\utils\\request.ts","mtime":1706604601056},{"path":"C:\\cangqiongwaimai\\苍穹外卖前端课程\\代码\\day02\\project-sky-admin-vue-ts\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\cangqiongwaimai\\苍穹外卖前端课程\\代码\\day02\\project-sky-admin-vue-ts\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\cangqiongwaimai\\苍穹外卖前端课程\\代码\\day02\\project-sky-admin-vue-ts\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"C:\\cangqiongwaimai\\苍穹外卖前端课程\\代码\\day02\\project-sky-admin-vue-ts\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"C:\\\\cangqiongwaimai\\\\\\u82CD\\u7A79\\u5916\\u5356\\u524D\\u7AEF\\u8BFE\\u7A0B\\\\\\u4EE3\\u7801\\\\day02\\\\project-sky-admin-vue-ts\\\\node_modules\\\\@babel\\\\runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _user = require(\"@/store/modules/user\");\n\nvar _requestOptimize = require(\"./requestOptimize\");\n\nvar _router = _interopRequireDefault(require(\"@/router\"));\n\nvar service = _axios.default.create({\n  baseURL: process.env.VUE_APP_BASE_API,\n  'timeout': 600000\n}); // Request interceptors\n\n\nservice.interceptors.request.use(function (config) {\n  // Add X-Access-Token header to every request, you can add other custom headers here\n  if (_user.UserModule.token) {\n    config.headers['token'] = _user.UserModule.token;\n  } else if (_user.UserModule.token && config.url != '/login') {\n    window.location.href = '/login';\n    return false;\n  }\n\n  return config;\n}, function (error) {\n  Promise.reject(error);\n}); // Response interceptors\n\nservice.interceptors.response.use(function (response) {\n  // console.log(response, 'response')\n  if (response.data.status === 401) {\n    _router.default.push('/login');\n  } //请求响应中的config的url会带上代理的api需要去掉\n\n\n  response.config.url = response.config.url.replace('/api', ''); // 请求完成，删除请求中状态\n\n  var key = (0, _requestOptimize.getRequestKey)(response.config);\n  (0, _requestOptimize.removePending)(key);\n\n  if (response.data.code === 1) {\n    return response;\n  }\n\n  return response;\n}, function (error) {\n  // console.log(error.config, pending, 'error')\n  if (error && error.response) {\n    switch (error.response.status) {\n      case 401:\n        _router.default.push('/login');\n\n        break;\n\n      case 405:\n        error.message = '请求错误';\n    }\n  } //请求响应中的config的url会带上代理的api需要去掉\n\n\n  error.config.url = error.config.url.replace('/api', ''); // 请求完成，删除请求中状态\n\n  var key = (0, _requestOptimize.getRequestKey)(error.config);\n  (0, _requestOptimize.removePending)(key);\n  return Promise.reject(error);\n});\nvar _default = service;\nexports.default = _default;",{"version":3,"sources":["C:\\cangqiongwaimai\\苍穹外卖前端课程\\代码\\day02\\project-sky-admin-vue-ts\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\cangqiongwaimai\\苍穹外卖前端课程\\代码\\day02\\project-sky-admin-vue-ts\\src\\utils\\request.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA,IAAM,OAAO,GAAG,eAAM,MAAN,CAAa;AAC3B,EAAA,OAAO,EAAE,OAAO,CAAC,GAAR,CAAY,gBADM;AAE3B,aAAW;AAFgB,CAAb,CAAhB,C,CAKA;;;AACA,OAAO,CAAC,YAAR,CAAqB,OAArB,CAA6B,GAA7B,CACE,UAAC,MAAD,EAAgB;AACd;AACA,MAAI,iBAAW,KAAf,EAAsB;AACpB,IAAA,MAAM,CAAC,OAAP,CAAe,OAAf,IAA0B,iBAAW,KAArC;AACD,GAFD,MAEO,IAAI,iBAAW,KAAX,IAAoB,MAAM,CAAC,GAAP,IAAc,QAAtC,EAAgD;AACrD,IAAA,MAAM,CAAC,QAAP,CAAgB,IAAhB,GAAuB,QAAvB;AACA,WAAO,KAAP;AACD;;AACD,SAAO,MAAP;AACD,CAVH,EAWE,UAAC,KAAD,EAAe;AACb,EAAA,OAAO,CAAC,MAAR,CAAe,KAAf;AACD,CAbH,E,CAgBA;;AACA,OAAO,CAAC,YAAR,CAAqB,QAArB,CAA8B,GAA9B,CACE,UAAC,QAAD,EAAkB;AAChB;AACA,MAAI,QAAQ,CAAC,IAAT,CAAc,MAAd,KAAyB,GAA7B,EAAkC;AAChC,oBAAO,IAAP,CAAY,QAAZ;AACD,GAJe,CAKhB;;;AACA,EAAA,QAAQ,CAAC,MAAT,CAAgB,GAAhB,GAAsB,QAAQ,CAAC,MAAT,CAAgB,GAAhB,CAAoB,OAApB,CAA4B,MAA5B,EAAoC,EAApC,CAAtB,CANgB,CAOhB;;AACA,MAAM,GAAG,GAAG,oCAAc,QAAQ,CAAC,MAAvB,CAAZ;AACA,sCAAc,GAAd;;AACA,MAAI,QAAQ,CAAC,IAAT,CAAc,IAAd,KAAuB,CAA3B,EAA8B;AAC5B,WAAO,QAAP;AACD;;AACD,SAAO,QAAP;AACD,CAfH,EAgBE,UAAC,KAAD,EAAe;AACb;AACA,MAAI,KAAK,IAAI,KAAK,CAAC,QAAnB,EAA6B;AAC3B,YAAQ,KAAK,CAAC,QAAN,CAAe,MAAvB;AACE,WAAK,GAAL;AACE,wBAAO,IAAP,CAAY,QAAZ;;AACA;;AACF,WAAK,GAAL;AACE,QAAA,KAAK,CAAC,OAAN,GAAgB,MAAhB;AALJ;AAOD,GAVY,CAWb;;;AACA,EAAA,KAAK,CAAC,MAAN,CAAa,GAAb,GAAmB,KAAK,CAAC,MAAN,CAAa,GAAb,CAAiB,OAAjB,CAAyB,MAAzB,EAAiC,EAAjC,CAAnB,CAZa,CAab;;AACA,MAAM,GAAG,GAAG,oCAAc,KAAK,CAAC,MAApB,CAAZ;AACA,sCAAc,GAAd;AACA,SAAO,OAAO,CAAC,MAAR,CAAe,KAAf,CAAP;AACD,CAjCH;eAoCe,O","sourcesContent":["import axios from 'axios'\nimport { UserModule } from '@/store/modules/user'\nimport {getRequestKey,removePending} from './requestOptimize'\nimport router from '@/router'\n\nconst service = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API,\n  'timeout': 600000\n})\n\n// Request interceptors\nservice.interceptors.request.use(\n  (config: any) => {\n    // Add X-Access-Token header to every request, you can add other custom headers here\n    if (UserModule.token) {\n      config.headers['token'] = UserModule.token\n    } else if (UserModule.token && config.url != '/login') {\n      window.location.href = '/login'\n      return false\n    }\n    return config\n  },\n  (error: any) => {\n    Promise.reject(error)\n  }\n)\n\n// Response interceptors\nservice.interceptors.response.use(\n  (response: any) => {\n    // console.log(response, 'response')\n    if (response.data.status === 401) {\n      router.push('/login')\n    }\n    //请求响应中的config的url会带上代理的api需要去掉\n    response.config.url = response.config.url.replace('/api', '')\n    // 请求完成，删除请求中状态\n    const key = getRequestKey(response.config);\n    removePending(key);\n    if (response.data.code === 1) {\n      return response\n    }\n    return response\n  },\n  (error: any) => {\n    // console.log(error.config, pending, 'error')\n    if (error && error.response) {\n      switch (error.response.status) {\n        case 401:\n          router.push('/login')\n          break;\n        case 405:\n          error.message = '请求错误'\n      }\n    }\n    //请求响应中的config的url会带上代理的api需要去掉\n    error.config.url = error.config.url.replace('/api', '')\n    // 请求完成，删除请求中状态\n    const key = getRequestKey(error.config);\n    removePending(key);\n    return Promise.reject(error)\n  }\n)\n\nexport default service\n"],"sourceRoot":""}]}